using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using System.Threading.Tasks;
using Xunit;

namespace StaticViewLocator.Tests;

/// <summary>
/// Tests for edge cases and error conditions in the StaticViewLocator generator
/// </summary>
public class StaticViewLocatorEdgeCaseTests
{
    [Fact]
    public async Task Generator_WithNoViewModels_GeneratesEmptyDictionary()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                [StaticViewLocator]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithAbstractViewModel_IgnoresAbstractClasses()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public abstract class AbstractViewModel { }
                
                public class ConcreteViewModel { }
                
                public class ConcreteView : UserControl { }

                [StaticViewLocator]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.ConcreteViewModel)] = () => new TestNamespace.ConcreteView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithInternalViewModel_IgnoresInternalClasses()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                internal class InternalViewModel { }
                
                public class PublicViewModel { }
                
                public class PublicView : UserControl { }

                [StaticViewLocator]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.PublicViewModel)] = () => new TestNamespace.PublicView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithInvalidNamespaceRule_UsesDefaultBehavior()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public class TestViewModel { }
                public class TestView : UserControl { }

                [StaticViewLocator(ViewToViewModelNamespaceRule = "InvalidRule")]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.TestViewModel)] = () => new TestNamespace.TestView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithInvalidSuffixRule_UsesDefaultBehavior()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public class TestViewModel { }
                public class TestView : UserControl { }

                [StaticViewLocator(ViewToViewModelSuffixRule = "InvalidRule")]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.TestViewModel)] = () => new TestNamespace.TestView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithEmptyIncludeNamespaces_IncludesNothing()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public class TestViewModel { }
                public class TestView : UserControl { }

                [StaticViewLocator(IncludeNamespaces = new string[0])]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithNestedClasses_IgnoresNestedViewModels()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public class OuterClass
                {
                    public class NestedViewModel { }
                }
                
                public class StandaloneViewModel { }
                public class StandaloneView : UserControl { }

                [StaticViewLocator]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.StandaloneViewModel)] = () => new TestNamespace.StandaloneView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    private static async Task VerifyGeneratedCode(string source, string expected)
    {
        var test = new CSharpSourceGeneratorTest<StaticViewLocatorGenerator, XUnitVerifier>
        {
            TestState =
            {
                Sources = { source },
                GeneratedSources =
                {
                    (typeof(StaticViewLocatorGenerator), "TestViewLocator_StaticViewLocator.cs", expected)
                },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net90,
                AdditionalReferences =
                {
                    typeof(Avalonia.Controls.Control).Assembly.Location,
                    typeof(Avalonia.Controls.UserControl).Assembly.Location,
                    typeof(Avalonia.Controls.Window).Assembly.Location,
                    typeof(Avalonia.Controls.Templates.IDataTemplate).Assembly.Location
                }
            }
        };

        await test.RunAsync();
    }
}