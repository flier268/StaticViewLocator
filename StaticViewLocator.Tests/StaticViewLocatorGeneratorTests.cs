using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using System.Threading.Tasks;
using Xunit;

namespace StaticViewLocator.Tests;

public class StaticViewLocatorGeneratorTests
{
    [Fact]
    public async Task Generator_WithBasicConfiguration_GeneratesExpectedCode()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public class TestViewModel { }

                public class TestView : UserControl { }

                [StaticViewLocator]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.TestViewModel)] = () => new TestNamespace.TestView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithNamespaceRule_GeneratesExpectedCode()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestApp.ViewModels
            {
                public class UserViewModel { }
            }

            namespace TestApp.Views
            {
                public class UserView : UserControl { }
            }

            namespace TestApp
            {
                [StaticViewLocator(ViewToViewModelNamespaceRule = "Views -> ViewModels")]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestApp;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestApp.ViewModels.UserViewModel)] = () => new TestApp.Views.UserView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithSuffixRule_GeneratesExpectedCode()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public class UserPageViewModel { }

                public class UserPage : UserControl { }

                [StaticViewLocator(ViewToViewModelSuffixRule = "Page -> PageViewModel")]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.UserPageViewModel)] = () => new TestNamespace.UserPage(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithIncludeNamespaces_OnlyIncludesSpecifiedNamespaces()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace IncludedNamespace
            {
                public class IncludedViewModel { }
                public class IncludedView : UserControl { }
            }

            namespace ExcludedNamespace
            {
                public class ExcludedViewModel { }
                public class ExcludedView : UserControl { }
            }

            namespace TestNamespace
            {
                [StaticViewLocator(IncludeNamespaces = new[] { "IncludedNamespace" })]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(IncludedNamespace.IncludedViewModel)] = () => new IncludedNamespace.IncludedView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithExcludeNamespaces_ExcludesSpecifiedNamespaces()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace IncludedNamespace
            {
                public class IncludedViewModel { }
                public class IncludedView : UserControl { }
            }

            namespace Avalonia.Controls
            {
                public class AvaloniaViewModel { }
            }

            namespace TestNamespace
            {
                [StaticViewLocator(ExcludeNamespaces = new[] { "Avalonia" })]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(IncludedNamespace.IncludedViewModel)] = () => new IncludedNamespace.IncludedView(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithCombinedConfiguration_GeneratesExpectedCode()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestApp.ViewModels
            {
                public class UserPageViewModel { }
            }

            namespace TestApp.Views
            {
                public class UserPage : UserControl { }
            }

            namespace Avalonia.Controls
            {
                public class AvaloniaViewModel { }
            }

            namespace TestApp
            {
                [StaticViewLocator(
                    ViewToViewModelNamespaceRule = "Views -> ViewModels",
                    ViewToViewModelSuffixRule = "Page -> PageViewModel",
                    ExcludeNamespaces = new[] { "Avalonia" },
                    IncludeNamespaces = new[] { "TestApp" }
                )]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestApp;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestApp.ViewModels.UserPageViewModel)] = () => new TestApp.Views.UserPage(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithMissingView_GeneratesNotFoundMessage()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public class TestViewModel { }

                [StaticViewLocator]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.TestViewModel)] = () => new TextBlock() { Text = "Not Found: TestNamespace.TestView" },
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    [Fact]
    public async Task Generator_WithMainWindowViewModel_GeneratesCorrectWindowMapping()
    {
        var source = """
            using StaticViewLocator;
            using Avalonia.Controls;
            using Avalonia.Controls.Templates;

            namespace TestNamespace
            {
                public class MainWindowViewModel { }

                public class MainWindow : Window { }

                [StaticViewLocator]
                public partial class TestViewLocator : IDataTemplate
                {
                    public Control? Build(object? data) => null;
                    public bool Match(object? data) => true;
                }
            }
            """;

        var expected = """
            // <auto-generated />
            #nullable enable
            using System;
            using System.Collections.Generic;
            using Avalonia.Controls;

            namespace TestNamespace;

            public partial class TestViewLocator
            {
                private static Dictionary<Type, Func<Control>> s_views = new()
                {
                    [typeof(TestNamespace.MainWindowViewModel)] = () => new TestNamespace.MainWindow(),
                };

                public static Control GetView<T>()
                    where T : notnull
                {
                    var type = typeof(T);
                    if (s_views.TryGetValue(type, out var factory))
                        return factory();

                    throw new InvalidOperationException($"No view registered for {typeof(T).FullName}");
                }
            }
            """;

        await VerifyGeneratedCode(source, expected);
    }

    private static async Task VerifyGeneratedCode(string source, string expected)
    {
        var test = new CSharpSourceGeneratorTest<StaticViewLocatorGenerator, XUnitVerifier>
        {
            TestState =
            {
                Sources = { source },
                GeneratedSources =
                {
                    (typeof(StaticViewLocatorGenerator), "TestViewLocator_StaticViewLocator.cs", expected)
                },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net90,
                AdditionalReferences =
                {
                    typeof(Avalonia.Controls.Control).Assembly.Location,
                    typeof(Avalonia.Controls.UserControl).Assembly.Location,
                    typeof(Avalonia.Controls.Window).Assembly.Location,
                    typeof(Avalonia.Controls.Templates.IDataTemplate).Assembly.Location
                }
            }
        };

        await test.RunAsync();
    }
}